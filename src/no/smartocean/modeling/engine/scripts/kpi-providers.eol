import "kpi-utils.eol";
import "units.eol";

operation smartocean!System get(kpi: kpi!Kpi): Any{

	var expr    = kpi.target_value.valuetype.getValue(self); 
	var target  = kpi.target_value.getValue();
	
	var query;
	
	query = kpi.time_bound.getValue() == "" ? expr + target.op + " " + target.target :
	 	"(" + expr + " " + target.op + " " + target.target + ")" + kpi.time_bound.getValue();
	
	return query;
}

operation kpi!Period getValue() {
	if (self.timestamp <= 0){
	 return ""; //NOW - instant when the query is evaluated //Assumption
	}
	var result = new String("[");
	result.concat(self.timestamp).concat(getPromQLDurationStr(self.unit)).concat("]");
	return result;

}

operation kpi!Instant getValue() {

	if (self.timestamp <= 0){
	 return ""; //NOW - instant when the query is evaluated //Assumption
	}
	else if(self.unit == kpi!TimeUnit#SEC){
		var result = new String("@ "); //UNIX TIMESTAMP
		result.concat(self.timestamp);
		return result;
	}
	else {
		var result = new String("offset ");
		result.concat(self.timestamp).concat(getPromQLDurationStr(self.unit));
		return result;
	}
	
}


operation kpi!RealValue get(system: smartocean!System): Real{
	return self.value.asReal();
}

operation kpi!IntegerValue get(system: smartocean!System): Integer{
	return self.value.asInteger();
}

operation kpi!StringValue get(system: smartocean!System): String{
	var parameter = self.getParameter();
	
	if(parameter != null){
		if(parameter.name.toLowerCase() == "metric"){
			var metrics = system.monitoring_data.collect(name | name == parameter.value);
			if(metrics.size == 0)
				("Error: Undefined metric "+parameter.name+" in "+system.system_name+" system subject model").println();
			else if(metrics.size == 1){
				var metric = metrics.flatten();
				return metric.metric_id;
			}
			else if(metrics.size > 1)
			 ("Error: Multiple metric "+parameter.name+" in "+system.system_name+" system subject model").println();
		}
		
		else if(parameter.name.toLowerCase() == "label"){
		  var metric = self.getMetric(); // must be used in arguments in expression //assumption
		  var labels = system.monitoring_data.labels.collect(name | name == parameter.value).flatten();
		  //Check if label is in the list of labels of the metric in the subject model
		  if(labels.size == 0)
				("Error: Undefined metric "+parameter.name+" in "+system.system_name+" system subject model").println();
			else if(labels.size == 1){
				var label = metrics.flatten();
				return metric.metric_id;
			}
			else if(labels.size > 1)
			 ("Error: Multiple metric "+parameter.name+" in "+system.system_name+" system subject model").println();
		}
		else
			return self.value.asString();
	}
	
	return "";

}


//PROMQL Query Operators: https://prometheus.io/docs/prometheus/latest/querying/operators/#operators
//PROMQL Query Funcitons: https://prometheus.io/docs/prometheus/latest/querying/functions/
operation kpi!Expression getValue(system: smartocean!System): String{

var kpi = self.getKPI();
var target = kpi.target_value.getValue();

var instant = kpi.time_bound.type().equals("kpi!Instant") ? true : false;

var args  = self.arguments; //list //getParameters().get(self);
var nargs = args.size();

var op = self.`operation`; //https://www.eclipse.org/epsilon/doc/eol/#escaping-reserved-keywords

//op: kpi!EEnumLiteral
switch (op) {
	case kpi!Operation#SUM: return instant? self.wrap("sum"): "+" ; //Get arguments
	case kpi!Operation#ADD: return "+" ; //Get arguments
	case kpi!Operation#DIFF: return "-";
	case kpi!Operation#AVG: return instant? self.wrap("avg") : self.wrap("avg_over_time");
	case kpi!Operation#MIN: return self.wrap("min");
	case kpi!Operation#MAX: return self.wrap("max");
	case kpi!Operation#DIV: return "/";
	case kpi!Operation#MULT: return "*";
	case kpi!Operation#LE:  return "<=";
	case kpi!Operation#GE: return ">=";
	case kpi!Operation#LT: return "<";
	case kpi!Operation#GT: return ">";
	case kpi!Operation#RATE: return self.wrap("rate");
	case kpi!Operation#GROUP: return "";
	case kpi!Operation#MATCH: return ""; //regex
	case kpi!Operation#FILTER: return "";
	case kpi!Operation#AND: return "and";
	case kpi!Operation#OR: return "or";
	case kpi!Operation#UNLESS: return "unless";
	case kpi!Operation#COUNT: return "count";
	default : "Operation not supported".println(); return ""; 
	}
}

operation kpi!RangeValue getValue(): Any {
	return new Tuple(max=self.getMaxValue(), min=self.getMinValue());
}

operation kpi!RangeValue _in(value: kpi!SingleValue): Boolean {
	return (value <= self.getMaxValue() and value >= self.getMinValue());
}

operation kpi!Range getMaxValue(): Any {
	return self.max.getValue(); 
}

operation kpi!Range getMinValue(): Any {
	return self.min.getValue(); 
}

operation kpi!SingleTarget getValue(): Tuple{

var op = self.assessment;

var opStr;

//op: kpi!EEnumLiteral
switch (op) {
	case kpi!Operation#LE: 
		opStr = "<=";
	case kpi!Operation#GE: 
		opStr = ">=";
	case kpi!Operation#LT: 
		opStr = "<";
	case kpi!Operation#GT: 
		opStr = ">";
	case kpi!Operation#AND: 
		opStr = "and";
	case kpi!Operation#OR: 
		opStr = "or";
	case kpi!Operation#UNLESS: 
		opStr = "unless";
	default : "Operation not supported for assessment".println(); 
		opStr =  "";
	}
	
	var result = new Tuple(op=opStr, target=self.target.getValue());
	
	return result;
	
}





