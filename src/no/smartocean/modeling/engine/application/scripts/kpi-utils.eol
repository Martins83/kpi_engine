
//Looks for metrics in Expression arguments
operation kpi!Expression getMetric(): String{
	for(valuetype in self.arguments){
		if(valuetype.isTypeOf(kpi!StringValue)){
			var parameter = valuetype.eContainer();
			if(parameter.name.toLowerCase() == "metric"){
				return parameter.value.value.asString();
			}
		}
	}
		
	return "";
}

//Looks for metrics in Expression arguments
operation kpi!Expression getMetric_ID(system: smartocean!System): String{
	for(valuetype in self.arguments){
		if(valuetype.isTypeOf(kpi!StringValue)){
			return valuetype.getValue(system);
			}
		else if(valuetype.isTypeOf(kpi!Expression)){
			//TODO
		 }
		}
		
	return "";
}

//Looks for metrics in Expression arguments
operation kpi!Expression getMetrics(): OrderedSet{
	var metrics = new OrderedSet();
	for(valuetype in self.arguments){
		if(valuetype.isTypeOf(kpi!StringValue)){
			var parameter = valuetype.eContainer();
			if(parameter.name.toLowerCase() == "metric"){
				metrics.add(parameter.value.value.asString());
			}
		}
	}
		
	return metrics;
}

// Build recursirvely name with dimension.dimension... 
operation kpi!Kpi getDimStr(): String {

	var dimension = new String();
	var mother = self.eContainer;
	
	
	if(mother.isTypeOf(kpi!Dimension))
		dimension =  mother.name;
				
	if(mother.eContainer.isTypeOf(kpi!Dimension))
		return mother.eContainer.buildDimStr(dimension);

	return dimension;

}

//Is called by Dimension elements
operation kpi!Dimension buildDimStr(suffix: String): String {

	var dimension = new String();
	dimension = self.name.concat(".");
	dimension = dimension.concat(suffix);
	
	if(self.eContainer.isTypeOf(kpi!Dimension))
		return self.eContainer.buildDimStr(dimension);		

	return dimension;

}

//@cache
operation kpi!ParameterValue getParameter(): kpi!Parameter{
	var mother = self.eContainer;
	
	if(mother.isTypeOf(kpi!Parameter))
		return mother;
		
	("Error: StringValue used outside Parameter Element scope?").println();
	
	return null;
}

operation kpi!Expression applyOp(op: String, set: Sequence<String>, constraints: OrderedSet<String>): String{

	var result = new String();
	for(arg in set){
		result = result.concat(arg.asString());
		if(hasMore)
			result = result.concat(" ").concat(op).concat(" ").concat(constraints.at(loopCount-1)).concat(" ");
	}
	return result;
}

// Find KPI element recursirvely
operation kpi!Expression getKPI(): Any{

	var mother = self.eContainer;

	if(mother.isTypeOf(kpi!SingleTarget) or mother.isTypeOf(kpi!Range) or mother.isTypeOf(kpi!Expression)) //sub-expression
		return mother.getKPI();
		
	return null;
}

// Find KPI element recursirvely
operation kpi!TargetType getKPI(): kpi!Kpi{

	var mother = self.eContainer;
	
	if(mother.isTypeOf(kpi!Kpi))
		return mother;
		
	return null;
}

operation kpi!Range getKPI(): kpi!Kpi{

	var mother = self.eContainer;
		
	if(mother.isTypeOf(kpi!Kpi))
		return mother;
		
	return null;
}


// adds operation and  "(" ")" around the calling string
operation String wrap(op: String) {

	var result = new String();
	result = op.concat("(").concat(self).concat(")");
	self = result;
}

operation kpi!Expression filter(system: smartocean!System, values: Sequence<String>): String {

assert(self.arguments.size() == values.size());

var metric_id = new String();
metric_id = values.first(); //FILTER OP must be applied to a Metric
var metric    = self.arguments.get(0);
var parameter = metric.getParameter();
var result = new String();
var filters =  new Sequence<String>();

	if(metric_id=="" or parameter == null){
		("Error First argument of filter operation should be a metric").println();
		return "";
	}

	if(parameter.name.toLowerCase() == "metric"){
		var metric_check = system.monitoring_data.exists(metric | metric.name.toLowerCase() == parameter.value.value.asString().toLowerCase());
		if(not metric_check)
			return "";
		result = result.concat(metric_id); //Check Metric Type: COUNTER HISTOGRAM SUMMARY OR GAUGE
		for(filter in self.arguments.excluding(metric)){
			var param = filter.getParameter();
			if(param == null)
				continue; //Key,Value used in labels filtering only ParameterValue Element allowed \\Constraint
			var label_check = system.monitoring_data.exists(metric | (metric.name.toLowerCase() == parameter.value.value.asString().toLowerCase()
				and metric.checkLabel(param.name)));
			if(label_check){
				filters.add(param.str());
			}
		 }
	}
	else{
		("Error First argument of filter operation should be a metric").println();
		return "";
	}
	if(filters.size() > 0){
		result = result.concat("{");
		for(filter in filters){
			result = result.concat(filter);
			if(hasMore)
				result = result.concat(",");
		}
		result = result.concat("}");
		return result;
	}
	return "";
}

operation kpi!Parameter getValue(): Tuple {
	
	return new Tuple(name=self.name, value=self.value.value);

}

operation kpi!Parameter str(): String {

	var str = new String();
	str = str.concat(self.name).concat("=").concat("\"").concat(self.value.value).concat("\"");
	return str;
}

operation smartocean!RuntimeMetric checkLabel(name: String): Boolean{
	var check = self.labels.exists(label | label.name.toLowerCase() == name.toLowerCase());
	return check;
}

operation kpi!Expression pcent(system: smartocean!System, values: Sequence<String>): String {

assert(self.arguments.size() == values.size());


var metric_selector = new String();
metric_selector = values.first(); //PCENT OP must be applied to a Metric selector - expects only one argument //Constraint
var metric_id = self.arguments.first().getMetric_ID(system);
var metric_alias = self.arguments.first().getMetric();


var result = new String();

	if(metric_id==""){
		("Error First argument of percentage operation should be a metric").println();
		return "";
	}

	if(metric_alias != ""){
		var metric_check = system.monitoring_data.exists(metric | metric.name.toLowerCase() == metric_alias.toLowerCase()); //TODO consider complex metrics expressions as well
		if(not metric_check)
			return "";
		var metric_type = system.monitoring_data.select(metric | metric.name.toLowerCase() == metric_alias.toLowerCase()).flatten().metric_type.first();
		//Check Metric Type: COUNTER HISTOGRAM SUMMARY OR GAUGE self.arguments.excluding(metric)
		switch(metric_type){
			case smartocean!MetricType#COUNTER:
				result = result.concat("(").concat(metric_selector).concat(" ").concat("/").concat(" ").concat(metric_id).concat(")");
			case smartocean!MetricType#GAUGE:
			case smartocean!MetricType#HIST:
				var total = metric_id.replace("_bucket","_count"); //TODO test
				result = result.concat(metric_selector);
				result = result.wrap("count").concat(" ").concat("/").concat(" ").concat(total);
			case smartocean!MetricType#SUM:
			default:
		}
		return result;
	}
	else{
		("Error First argument of filter operation should be a metric").println();
		return "";
	}
	return "";
	
}

//<vector expr> <bin-op> on(<label list>) <vector expr>
// https://prometheus.io/docs/prometheus/latest/querying/operators/#vector-matching
operation kpi!Expression getBinaryOpLabels(system: smartocean!System, values: Sequence<String>): OrderedSet<String>{

var result = new OrderedSet<String>();

for(argument in self.arguments){
	
	var left = argument;
	
		if(hasMore){ //Binary op should be used with at least 2 arguments
			var right  = self.arguments.get(loopCount);
			
			var labels_left = system.monitoring_data.select(metric | metric.name.toLowerCase() == argument.value.toLowerCase()).first().labels.collect(label| label.name);
			var labels_right = system.monitoring_data.select(metric | metric.name.toLowerCase() == right.value.toLowerCase()).first().labels.collect(label| label.name);
			var op_constraint = labels_left.select(label | labels_right.contains(label));
			if(op_constraint.size() == 0)
				("Error on binary operation with metrics with no common labels").println();
				//TODO Throw error?
			else if(op_constraint.size() == labels_left.size() and op_constraint.size() == labels_right.size()){
				result.add(""); //if the metrics have the same labels no constraints on binary operations needed
			}
			else {
				var constraint = new String();
				constraint = constraint.concat("on(");
				for(label in op_constraint){
					constraint = constraint.concat(label);
					if(hasMore)
						constraint = constraint.concat(",");
				}
				constraint = constraint.concat(")");
					
				result.add(constraint);
			}
		}

	}

return result;

}


