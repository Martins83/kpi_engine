import "kpi-utils.eol";
import "units.eol";

operation smartocean!System get(kpi: kpi!Kpi): Any{
	
	//expr.getPromQLUnitStr(kpi.unit); - to be comparable with target 
	var target  = kpi.target_value.getValue(self);
	
	var expr    = kpi.target_value.valuetype.getValue(self);
	
	var query = new String();
	
	if(kpi.target_value.isTypeOf(kpi!SingleTarget)){
		query = kpi.time_bound.getValue() == "" ? expr + target.op + " " + target.target :
	 		"(" + expr + " " + target.op + " " + target.target + ")" + kpi.time_bound.getValue();
	 	}
	else if(kpi.target_value.isTypeOf(kpi!Range)){
		query = kpi.time_bound.getValue() == "" ? "("+expr + " >= " + target.min +")"+" and " +"("+ expr + " <= " + target.max+")" : 
	 		"(" + "("+expr + " >= " + target.min +")"+" and " +"("+ expr + " <= " + target.max+")" + ")" + kpi.time_bound.getValue();
	}
	
	return query;
}

operation kpi!Period getValue(): String {
	if (self.period <= 0){
	 return ""; //NOW - instant when the query is evaluated //Constraint
	}
	var result = new String();
	result = result.concat("[");
	result = result.concat(self.period.asString()).concat(getPeriodStr(self.unit)).concat("]");
	return result;

}

operation kpi!Instant getValue(): String {

	if (self.timestamp <= 0){
	 return ""; //NOW - instant when the query is evaluated //Constraint
	}
	else if(self.unit == kpi!TimeUnit#SEC){
		var result = new String("@ "); //UNIX TIMESTAMP
		result = result.concat(self.timestamp);
		return result;
	}
	else {
		var result = new String("offset ");
		result = result.concat(self.timestamp).concat(getPeriodStr(self.unit));
		return result;
	}
	
}


operation kpi!RealValue getValue(system: smartocean!System): String{
	var result = getPromQLUnit(self.unit,self.value);
	return result.asString();//self.value.asReal(); self.value + unit;
}

operation kpi!IntegerValue getValue(system: smartocean!System): String{
	var result = getPromQLUnit(self.unit,self.value.asReal());
	return result.asString();//self.value.asInteger();
}

//@cache
operation kpi!StringValue getValue(system: smartocean!System): String{
	var parameter = self.getParameter();
	
	if(parameter != null){
		if(parameter.name.toLowerCase() == "metric"){
			var metrics = system.monitoring_data.select(metric | metric.name.toLowerCase() == parameter.value.value.asString().toLowerCase());
			if(metrics.size == 0)
				("Error: Undefined metric "+parameter.name+" in "+system.system_name+" system subject model").println();
			else if(metrics.size == 1){
				var metric = metrics.flatten();
				return metric.metric_id.first();
			}
			else if(metrics.size > 1)
			 ("Error: Multiple metric "+parameter.name+" in "+system.system_name+" system subject model").println();
		}
		else
			return parameter.str();//self.value.asString();
	}
	
	return "";

}

//PROMQL Query Operators: https://prometheus.io/docs/prometheus/latest/querying/operators/#operators
//PROMQL Query Functions: https://prometheus.io/docs/prometheus/latest/querying/functions/
operation kpi!Expression getValue(system: smartocean!System): String{

var kpi = self.getKPI();

if(kpi == null){
	("Error could not find associated KPI").println();
	return "";
}

var is_sub = self.eContainer().isTypeOf(kpi!Expression);

var instant = kpi.time_bound.type().equals("kpi!Instant") ? true : false;

var args = Sequence<String>; 

args  = self.arguments.collect(arg | arg.getValue(system));

var sub_expr = self.sub_expression.isDefined() ? self.sub_expression.getValue(system) : "";

if((self.arguments.first() == self.sub_expression)) //End of resursion for intermediate operation //Constraint
	sub_expr = "";

var nargs = args.size();

var op = self.`operation`; //https://www.eclipse.org/epsilon/doc/eol/#escaping-reserved-keywords

var expr = new String();

//Precedence: Args -> Sub_Expression //Constraint
//The first argument of sub_expressions are the parent Expression Element //Constraint

//op: kpi!EEnumLiteral
switch (op) {
	case kpi!Operation#SUM: 
		expr.concat(args).concat(sub_expr).wrap("sum");
	case kpi!Operation#ADD:
		expr = is_sub ?  expr.concat(" + ").concat(self.applyOp("+",args)) : expr.concat(self.applyOp("+",args));
		expr = sub_expr == "" ? expr : expr.concat(sub_expr);
	case kpi!Operation#DIFF: 
		expr = is_sub ?  expr.concat("-").concat(self.applyOp("-",args)) : expr.concat(self.applyOp("-",args));
		expr = sub_expr == "" ? expr : expr.concat(sub_expr);
	case kpi!Operation#AVG:
		expr = sub_expr == "" ? expr.concat(args) : expr.concat(args).concat(sub_expr); 
		expr = instant? expr.wrap("avg") : expr.wrap("avg_over_time");
	case kpi!Operation#MIN: 
		expr = sub_expr == "" ? expr.concat(args).wrap("min") : expr.concat(args).concat(sub_expr).wrap("min");
	case kpi!Operation#MAX: 
		sub_expr == "" ? expr.concat(args).wrap("max") : expr.concat(args).concat(sub_expr).wrap("max");
	case kpi!Operation#DIV: 
		expr = is_sub ?  expr.concat("/").concat(self.applyOp("/",args)) : expr.concat(self.applyOp("/",args));
		expr = sub_expr == "" ? expr : expr.concat(sub_expr);
	case kpi!Operation#MULT: 
		expr = is_sub ?  expr.concat("*").concat(self.applyOp("*",args)) : expr.concat(self.applyOp("*",args));
		expr = sub_expr == "" ? expr : expr.concat(sub_expr);
	case kpi!Operation#LE:  
		is_sub ?  expr.concat("<=").concat(self.applyOp("<=",args)) : expr.concat(self.applyOp("<=",args));
		sub_expr == "" ? expr : expr.concat(sub_expr);
	case kpi!Operation#GE: 
		expr = is_sub ?  expr.concat(">=").concat(self.applyOp(">=",args)) : expr.concat(self.applyOp(">=",args));
		expr = sub_expr == "" ? expr : expr.concat(sub_expr);
	case kpi!Operation#LT: 
		is_sub ?  expr.concat("<").concat(self.applyOp("<",args)) : expr.concat(self.applyOp("<",args));
		sub_expr == "" ? expr : expr.concat(sub_expr);
	case kpi!Operation#GT:
		expr = is_sub ?  expr.concat(">").concat(self.applyOp(">",args)) : expr.concat(self.applyOp(">",args));
		expr = sub_expr == "" ? expr : expr.concat(sub_expr);
	case kpi!Operation#RATE: 
		expr = sub_expr == "" ? expr.concat(args).wrap("rate") : expr.concat(args).concat(sub_expr).wrap("rate");
	case kpi!Operation#FILTER: // 1st arg must be metric!! //Constraint
		var result =  self.filter(system,args);
		expr = sub_expr == "" ? expr.concat(result): expr.concat(result).concat(sub_expr);
	case kpi!Operation#AND:
		expr = is_sub ?  expr.concat("and").concat(self.applyOp("and",args)) : expr.concat(self.applyOp("and",args));
		expr = sub_expr == "" ? expr : expr.concat(sub_expr);
	case kpi!Operation#OR: 
		expr = is_sub ?  expr.concat("or").concat(self.applyOp("or",args)) : expr.concat(self.applyOp("or",args));
		expr = sub_expr == "" ? expr : expr.concat(sub_expr);
	case kpi!Operation#UNLESS:
		expr = is_sub ?  expr.concat("unless").concat(self.applyOp("unless",args)) : expr.concat(self.applyOp("unless",args));
		expr = sub_expr == "" ? expr : expr.concat(sub_expr);
	case kpi!Operation#COUNT: 
		expr = sub_expr == "" ? expr.concat(args).wrap("count") : expr.concat(args).concat(sub_expr).wrap("count");
	default : "Operation not supported".println(); 
	}
	return expr;
}

operation kpi!Range getValue(system: smartocean!System): Any {
	return new Tuple(max=self.getMaxValue(), min=self.getMinValue());
}

operation kpi!RangeValue _in(value: kpi!SingleValue): Boolean {
	return (value <= self.getMaxValue() and value >= self.getMinValue());
}

operation kpi!Range getMaxValue(): Any {
	return self.max.getValue(); 
}

operation kpi!Range getMinValue(): Any {
	return self.min.getValue(); 
}

operation kpi!SingleTarget getValue(system: smartocean!System): Tuple{

var op = self.assessment;

var opStr;

//op: kpi!EEnumLiteral
switch (op) {
	case kpi!Operation#LE: 
		opStr = "<=";
	case kpi!Operation#GE: 
		opStr = ">=";
	case kpi!Operation#LT: 
		opStr = "<";
	case kpi!Operation#GT: 
		opStr = ">";
	case kpi!Operation#AND: 
		opStr = "and";
	case kpi!Operation#OR: 
		opStr = "or";
	case kpi!Operation#UNLESS: 
		opStr = "unless";
	default : "Operation not supported for assessment".println(); 
		opStr =  "";
	}
	
	var result = new Tuple(op=opStr, target=self.target.getValue(system));
	
	return result;
	
}





