import "kpi-utils.eol";
import "units.eol";

operation smartocean!System get(kpi: kpi!Kpi): Any{ //HTTP Request
	
	//expr.getPromQLUnitStr(kpi.unit); - to be comparable with target 
	var target = kpi.target_value.getValue(self);
	
	var expr = kpi.target_value.valuetype.getValue(self);
	
	var result = new String();
	
	
	if(kpi.target_value.isTypeOf(kpi!SingleTarget)){
		result = "("+expr + target.op + " " + target.target+")";
	 }
	else if(kpi.target_value.isTypeOf(kpi!Range)){
		
		if(target.max == target.min){
	 		result = "("+expr + " >= " + target.min +")";
	 	}
	 	else {
	 		result = "("+expr + " >= " + target.min +")"+" and " +"("+ expr + " <= " + target.max+")";
	 	}
	}
	
	var query = new String();
	
	//Build HTTP query: https://prometheus.io/docs/prometheus/latest/querying/api/#expression-queries
	if(kpi.time_bound.isTypeOf(kpi!Instant)){
		var time = kpi.time_bound.getValue();
		query = time == "" ? query.concat("query?query=").concat(result)
		 :query.concat("query?query=").concat(result).concat("&time=").concat(time);
	}
	else if(kpi.time_bound.isTypeOf(kpi!Period)){
		var step = kpi.time_bound.step.isDefined ? kpi.time_bound.getStepStr(): "30s"; //Hard-coded - max resolution
		query = query.concat("query_range?query=").concat(result).concat(kpi.time_bound.getValue()).concat("&step=").concat(step); 
	}
	
	return query;
}

operation smartocean!System getPromQLStr(kpi: kpi!Kpi): Any{
	
	//expr.getPromQLUnitStr(kpi.unit); - to be comparable with target 
	var target  = kpi.target_value.getValue(self);
	
	var expr    = kpi.target_value.valuetype.getValue(self);
	
	var query = new String();
	
	if(kpi.target_value.isTypeOf(kpi!SingleTarget)){
		query = kpi.time_bound.getValueStr() == "" ? expr + target.op + " " + target.target :
	 		"(" + expr + " " + target.op + " " + target.target + ")" + kpi.time_bound.getValueStr();
	 	}
	else if(kpi.target_value.isTypeOf(kpi!Range)){
		//query = kpi.time_bound.getValueStr() == "" ? "("+expr + " >= " + target.min +")"+" and " +"("+ expr + " <= " + target.max+")" : 
	 	//	"(" + "("+expr + " >= " + target.min +")"+" and " +"("+ expr + " <= " + target.max+")" + ")" + kpi.time_bound.getValueStr();
	 	if(target.max == target.min){
	 		query = kpi.time_bound.getValueStr() == "" ? "("+expr + " >= " + target.min +")" : 
	 		"(" + "("+expr + " >= " + target.min +")"+")" + kpi.time_bound.getValueStr();
	 	}
	 	else {
	 		query = kpi.time_bound.getValueStr() == "" ? "("+expr + " >= " + target.min +")"+" and " +"("+ expr + " <= " + target.max+")" : 
	 		"(" + "("+expr + " >= " + target.min +")"+" and " +"("+ expr + " <= " + target.max+")" + ")" + kpi.time_bound.getValueStr();
	 	}
	}
	
	return query;
}

operation smartocean!System getExprBrowserStr(kpi: kpi!Kpi, index: Integer): Any{
	
	//expr.getPromQLUnitStr(kpi.unit); - to be comparable with target 
	var target  = kpi.target_value.getValue(self);
	
	var expr    = kpi.target_value.valuetype.getValue(self);
	
	var query = new String();
	
	var result = new String();
	
	
	if(kpi.target_value.isTypeOf(kpi!SingleTarget)){
		result = "("+expr + target.op + " " + target.target+")";
	 }
	else if(kpi.target_value.isTypeOf(kpi!RangeTarget)){
		
		if(target.max == target.min){
	 		result = "("+expr + " >= " + target.min +")";
	 	}
	 	else {
	 		result = "("+expr + " >= " + target.min +")"+" and " +"("+ expr + " <= " + target.max+")";
	 	}
	}
	
	//g0.expr=
	query = query.concat("g").concat(index.toString()).concat(".expr=").concat(result);
	//&g0.tab=0&g0.stacked=0&g0.show_exemplars=0
	query = query.concat("&g").concat(index.toString()).concat(".tab=0").concat("&g").concat(index.toString()).concat(".stacked=0").concat("&g").concat(index.toString()).concat(".show_exemplars=0");
	
	if(kpi.time_bound.isTypeOf(kpi!Instant)){
	
		var time = kpi.time_bound.getValue();
		
		//&g0.range_input=1h
		query = query.concat("&g").concat(index.toString()).concat(".range_input=").concat("1h"); //TODO hard-coded
		if(time != ""){
			//&g0.end_input=
			query = query.concat("&g").concat(index.toString()).concat(".end_input=").concat(time);
			//&g0.moment_input=
			query = query.concat("&g").concat(index.toString()).concat(".moment_input=").concat(time);
		}
	}
	else if(kpi.time_bound.isTypeOf(kpi!Period)){
		//&g0.range_input=1h
		query = query.concat("&g").concat(index.toString()).concat(".range_input=").concat(kpi.time_bound.period.asString()).concat(getPeriodStr(kpi.time_bound.unit));
	}
	
	return query;
}

operation kpi!Period getValue(): String {
	if (self.period <= 0){
		throw "Error: Period of evalution should be greater than zero.";
		
	 return "";
	}
	var result = new String();
	result = result.concat("&start=");
	result = result.concat(getTimeDelta(self.unit,self.period));
	var instant = Native("java.time.Instant");
	var time = instant.now().getEpochSecond();
	result = result.concat("&end=").concat(time.toString());
	return result;

}

//https://github.com/prometheus/prometheus/issues/9999
operation kpi!Period getStepStr(): String {
	var step = new String();
	var value = self.step;
	if(self.step < 15){
		("Maximum step duration resolution is 15 seconds.").println();
		value = 15;
	}
	switch(self.unit){
			
		case kpi!TimeUnit#DAY:
		value=1;
		step = step.concat(value.toString()).concat("h"); // 1 hour step
			
		case kpi!TimeUnit#WEEK:
		value=1;
		step = step.concat(value.toString()).concat("d"); // 1 day step
			
		case kpi!TimeUnit#YEAR:
		value=30;
		step = step.concat(value.toString()).concat("d"); // 30 day step
		
		case kpi!TimeUnit#MIN:		
		case kpi!TimeUnit#HR:	
		case kpi!TimeUnit#MS:
		case kpi!TimeUnit#SEC:
		default:
			step = step.concat(value.toString()).concat("s"); //default step
	}
	
	return step;
}

operation kpi!Instant getValue(): String {

	if (self.time_ago == 0){
	 return ""; //Latest - instant when the query is evaluated //Constraint
	}
	else if (self.time_ago < 0){ //NOW - instant when the query is evaluated //Constraint //TODO FIX
	 var instant = Native("java.time.Instant");
	 var time = instant.now().getEpochSecond();
	 return time.toString(); //NOW - instant when the kpi is evaluated //Constraint
	}
	else if(self.unit == kpi!TimeUnit#SEC){
		var result = new String(); //UNIX TIMESTAMP
		result = result.concat(self.time_ago);
		return result;
	}
	else if(self.unit == kpi!TimeUnit#MS){
		var result = new String(); //UNIX TIMESTAMP
		var temp = self.time_ago / 1000; //convert from millisencods to seconds
		result = result.concat(temp.asInteger());
		return result;
	}
	else {
		var result = getTimeDelta(self.unit,self.time_ago); 
		return result;
	}
	
}

operation kpi!Period getValueStr(): String {
	if (self.period <= 0){
	 return ""; //NOW - instant when the query is evaluated //Constraint
	}
	var result = new String();
	result = result.concat("[");
	result = result.concat(self.period.asString()).concat(getPeriodStr(self.unit)).concat("]");
	return result;

}

operation kpi!Instant getValueStr(): String {

	if (self.time_ago < 0){
	 return ""; //Latest - instant when the query is evaluated //Constraint
	}
	else if (self.time_ago == 0){
	 return ""; //NOW - instant when the query is evaluated //Constraint
	}
	else if(self.unit == kpi!TimeUnit#SEC){
		var result = new String("@ "); //UNIX TIMESTAMP
		result = result.concat(self.time_ago);
		return result;
	}
	else {
		var result = new String("offset ");
		result = result.concat(self.time_ago).concat(getPeriodStr(self.unit));
		return result;
	}
	
}


operation kpi!RealValue getValue(system: smartocean!System): String{
	var result = getPromQLUnit(self.unit,self.value);
	return result.asString();//self.value.asReal(); self.value + unit;
}

operation kpi!IntegerValue getValue(system: smartocean!System): String{
	var result = getPromQLUnit(self.unit,self.value.asReal());
	return result.asString();//self.value.asInteger();
}

operation kpi!RealValue getValue(): String{
	var result = getPromQLUnit(self.unit,self.value);
	return result.asString();//self.value.asReal(); self.value + unit;
}

operation kpi!IntegerValue getValue(): String{
	var result = getPromQLUnit(self.unit,self.value.asReal());
	return result.asString();//self.value.asInteger();
}

//@cache
operation kpi!StringValue getValue(system: smartocean!System): String{
	var parameter = self.getParameter();
	
	if(parameter != null){
		if(parameter.name.toLowerCase() == "metric"){
			var metrics = system.monitoring_data.select(metric | metric.name.toLowerCase() == parameter.value.value.asString().toLowerCase());
			if(metrics.size == 0)
				("Error: Undefined metric "+parameter.name+" in "+system.system_name+" system subject model").println();
			else if(metrics.size == 1){
				var metric = metrics.flatten();
				var result = new String();
				result = result.concat(metric.metric_id.first());
				if(metric.metric_type.first() == smartocean!MetricType#COUNTER){
					//result = result.concat("_total"); - Not added to all counter metrics in Prometheus //TODO investigate
				}
				else if(metric.metric_type.first() == smartocean!MetricType#HIST){
					result = result.concat("_bucket");
				}
				else if(metric.metric_type.first() == smartocean!MetricType#SUM) {
				//TODO
				}
				return result;
			}
			else if(metrics.size > 1)
			 ("Error: Multiple metric "+parameter.name+" in "+system.system_name+" system subject model").println();
		}
		else
			return parameter.str();//self.value.asString();
	}
	
	return "";

}

//PROMQL Query Operators: https://prometheus.io/docs/prometheus/latest/querying/operators/#operators
//PROMQL Query Functions: https://prometheus.io/docs/prometheus/latest/querying/functions/
operation kpi!Expression getValue(system: smartocean!System): String{

var kpi = self.getKPI();

if(kpi == null){
	("Error could not find associated KPI").println();
	return "";
}

var is_sub = self.eContainer().isTypeOf(kpi!Expression);

var instant = kpi.time_bound.isTypeOf(kpi!Instant) ? true : false;

var args = Sequence<String>; 

args  = self.arguments.collect(arg | arg.getValue(system));

var sub_expr = self.sub_expression.isDefined() ? self.sub_expression.getValue(system) : "";

if((self.arguments.first() == self.sub_expression)) //End of resursion for intermediate operation //Constraint
	sub_expr = "";

var nargs = args.size();

var op = self.`operation`; //https://www.eclipse.org/epsilon/doc/eol/#escaping-reserved-keywords

var expr = new String();

//Precedence: Args -> Sub_Expression //Constraint
//The first argument of sub_expressions are the parent Expression Element //Constraint

//op: kpi!EEnumLiteral
switch (op) {
	case kpi!Operation#SUM: 
		expr = sub_expr == "" ? expr.concat(args) : expr.concat(args).concat(sub_expr);
		expr = instant? expr.wrap("sum") : expr.wrap("sum_over_time");
	case kpi!Operation#ADD:
		var constraints = self.getBinaryOpLabels(system,args,false);
		expr = expr.concat(self.applyOp("+",args,constraints)); //is_sub ?  expr.concat(" + ").concat(self.applyOp("+",args,constraints)) :
		expr = sub_expr == "" ? expr : expr.concat(sub_expr);
	case kpi!Operation#DIFF:
		var constraints = self.getBinaryOpLabels(system,args,false); 
		expr = expr.concat(self.applyOp("-",args,constraints)); //is_sub ?  expr.concat("-").concat(self.applyOp("-",args,constraints)) :
		expr = sub_expr == "" ? expr : expr.concat(sub_expr);
	case kpi!Operation#AVG:
		expr = sub_expr == "" ? expr.concat(args) : expr.concat(args).concat(sub_expr); 
		expr = instant? expr.wrap("avg") : expr.wrap("avg_over_time");
	case kpi!Operation#MIN:
		expr = sub_expr == "" ? expr.concat(args) : expr.concat(args).concat(sub_expr);
		expr = instant? expr.wrap("min") : expr.wrap("min_over_time");
	case kpi!Operation#MAX: 
		expr = sub_expr == "" ? expr.concat(args) : expr.concat(args).concat(sub_expr);
		expr = instant? expr.wrap("max") : expr.wrap("max_over_time");
	case kpi!Operation#DIV: 
		var constraints = self.getBinaryOpLabels(system,args,false);
		expr = expr.concat(self.applyOp("/",args,constraints)); //is_sub ?  expr.concat("/").concat(self.applyOp("/",args,constraints)) :
		expr = sub_expr == "" ? expr : expr.concat(sub_expr);
	case kpi!Operation#MULT:
		var constraints = self.getBinaryOpLabels(system,args,false); 
		expr = expr.concat(self.applyOp("*",args,constraints)); //is_sub ?  expr.concat("*").concat(self.applyOp("*",args,constraints)) :
		expr = sub_expr == "" ? expr : expr.concat(sub_expr);
	case kpi!Operation#LE:  
		expr = is_sub ?  expr.concat("<=").concat(self.applyOp("<=",args)) : expr.concat(self.applyOp("<=",args)); //ADD ,constraints ?
		sub_expr == "" ? expr : expr.concat(sub_expr);
	case kpi!Operation#GE: 
		expr = is_sub ?  expr.concat(">=").concat(self.applyOp(">=",args)) : expr.concat(self.applyOp(">=",args));
		expr = sub_expr == "" ? expr : expr.concat(sub_expr);
	case kpi!Operation#LT: 
		is_sub ?  expr.concat("<").concat(self.applyOp("<",args)) : expr.concat(self.applyOp("<",args));
		sub_expr == "" ? expr : expr.concat(sub_expr);
	case kpi!Operation#GT:
		expr = is_sub ?  expr.concat(">").concat(self.applyOp(">",args)) : expr.concat(self.applyOp(">",args));
		expr = sub_expr == "" ? expr : expr.concat(sub_expr);
	case kpi!Operation#RATE: 
		expr = sub_expr == "" ? expr.concat(args).wrap("rate") : expr.concat(args).concat(sub_expr).wrap("rate");
	case kpi!Operation#FILTER: // 1st arg must be metric!! //Constraint
		var result =  self.filter(system,args);
		expr = sub_expr == "" ? expr.concat(result): expr.concat(result).concat(sub_expr);
	case kpi!Operation#AND:
		expr = is_sub ?  expr.concat("and").concat(self.applyOp("and",args)) : expr.concat(self.applyOp("and",args));
		expr = sub_expr == "" ? expr : expr.concat(sub_expr);
	case kpi!Operation#OR: 
		expr = is_sub ?  expr.concat("or").concat(self.applyOp("or",args)) : expr.concat(self.applyOp("or",args));
		expr = sub_expr == "" ? expr : expr.concat(sub_expr);
	case kpi!Operation#UNLESS:
		expr = is_sub ?  expr.concat("unless").concat(self.applyOp("unless",args)) : expr.concat(self.applyOp("unless",args));
		expr = sub_expr == "" ? expr : expr.concat(sub_expr);
	case kpi!Operation#COUNT: 
		expr = sub_expr == "" ? expr.concat(args).wrap("count") : expr.concat(args).concat(sub_expr).wrap("count");
	case kpi!Operation#PCENT: 
		var result =  self.pcent(system,args);
		expr = sub_expr == "" ? expr.concat(result): expr.concat(result).concat(sub_expr);
	case kpi!Operation#EQ: 
		expr = is_sub ?  expr.concat(" == ").concat(self.applyOp("==",args)) : expr.concat(self.applyOp("==",args));
		expr = sub_expr == "" ? expr : expr.concat(sub_expr);
	case kpi!Operation#NOTEQ: 
		expr = is_sub ?  expr.concat(" != ").concat(self.applyOp("!=",args)) : expr.concat(self.applyOp("!=",args));
		expr = sub_expr == "" ? expr : expr.concat(sub_expr);
	default : "Operation not supported".println(); 
	}
	return expr;
}

operation kpi!RangeTarget getValue(system: smartocean!System): Any {
	return self.target.getValue(system);
}

operation kpi!Range getValue(system: smartocean!System): Any {
	return new Tuple(max=self.getMaxValue(), min=self.getMinValue());
}

operation kpi!Range _in(value: kpi!SingleValue): Boolean {
	return (value <= self.getMaxValue() and value >= self.getMinValue());
}

operation kpi!Range getMaxValue(): Any {
	return self.max.getValue(); 
}

operation kpi!Range getMinValue(): Any {
	return self.min.getValue(); 
}

operation kpi!RangeTarget getMaxValue(): Any {
	return self.target.max.getValue(); 
}

operation kpi!RangeTarget getMinValue(): Any {
	return self.target.min.getValue(); 
}

operation kpi!SingleTarget getValue(system: smartocean!System): Tuple{

var op = self.assessment;

var opStr;

//op: kpi!EEnumLiteral
switch (op) {
	case kpi!Assessment#LE: 
		opStr = " <=";
	case kpi!Assessment#GE: 
		opStr = " >=";
	case kpi!Assessment#LT: 
		opStr = " <";
	case kpi!Assessment#GT: 
		opStr = " >";
	case kpi!Assessment#AND: 
		opStr = " and";
	case kpi!Assessment#OR: 
		opStr = " or";
	case kpi!Assessment#MIN: 
		opStr = " min";
	case kpi!Assessment#MAX: 
		opStr = " max";
	case kpi!Assessment#EQ: 
		opStr = " ==";
	case kpi!Assessment#NOTEQ: 
		opStr = " =!";
	default : "Operation not supported for assessment".println(); 
		opStr =  "";
	}
	
	var result = new Tuple(op=opStr, target=self.target.getValue(system));
	
	return result;
	
}





