
//empty the actualized values

var QAI=kpi!Kpi.all.select(k|k.name=="QAI").first;
("Quality of Air index: "+QAI).println();
smartcity!SmartCity.all.collect(sc|sc.get(QAI)).first.println();


var QAIPM=kpi!Kpi.all.select(k|k.name=="QAI-PM").first;
("Quality of Air index based on PM10: "+QAIPM).println();
smartcity!SmartCity.all.collect(sc|sc.get(QAIPM)).first.println();


var WBC=kpi!Kpi.all.select(k|k.name=="WBC").first;
("Wireless Broadband coverage: "+WBC).println();
smartcity!SmartCity.all.collect(sc|sc.get(WBC)).first.println();


operation smartcity!SmartCity get(kpi: kpi!Kpi): Any{

var  elements: Sequence<Real>=new Sequence();
return kpi.value.valuetype.get(self);


}

operation kpi!SingleValue get(city: smartcity!SmartCity): Any{


	return city.parameter.select(p|self.parameter.name==p.name).value.first;



}

operation kpi!AggregatedValue get(city: smartcity!SmartCity): Any{

	return self.values.get(city, self.oper);
//	return city.parameter.select(p|self.values.parameter.name.includes(p.name)).getop(self.oper);

}

operation OrderedSet<kpi!ValueType> get(city: smartcity!SmartCity, oper: kpi!EEnumLiteral): Any{

var values : Sequence<Any> ;
//for (s in self) { 
	return self.collect(s|s.get(city)).getop(oper);
//}

	//return city.parameter.select(p|self.parameter.name.includes(p.name)).getop(oper);



}


operation Any getop(op: kpi!EEnumLiteral): Any{

switch (op) {
case kpi!Operation#GET: return self;
case kpi!Operation#SUM: return self.sum();
case kpi!Operation#AVG: return self.sum()/self.size();
case kpi!Operation#MIN: return self.min();
case kpi!Operation#MAX: return self.max();
case kpi!Operation#DIV: return self.get(0)/self.get(1);
default : "No operation provided ".println(); }
}




